
########################### C++ GLOSSARY ###############################

1. // - This is syntax for the comments in C++ Programming language.
	It is call double forward slashes. 
 	Ex. // This is code for sorting names.
	The String of characters after // will not be processed by
	the compiler.

2. << - The output stream operator << is used to send the output to
	output device, which can be monitor, file etc.

3. C++ - It is the Programming language used to write general purpose
	 Programs. It specifies the grammer used to write instructions
	 which can be send to CPU for processing.

4. comment - Comment is used to describe functionality of code in simple
	     words which can be understood by other programmers or you when
	     you read the code.

5. Compiler - Compiler is a programm which converts human undestandable code
	      to machine understandable code. i.e source code written in programming
	      languages like C, C++ to language of machine which is of 1's and 0's.

6. Compile-Time error - The error generated by the compiler while compiling the program
			Is called compile time error. These errors are actually once which
			compiler founds to be not in tandem with grammer of programming language.

7. cout - Cout is library from standard libraries of C++. It is called 
	  output stream and it is used to print the output to the console.

8. executable - The executable is the programm which we can run by double clicking it
		or by opening it from command prompt. The executable is operating system
		understandable which means different operating systems have different executables
		Eg. Windows - .exe
		    Linux - .o (Actually linux does not care about the extensions)
		    Mac - .dmg (Its actually full package)
		We generate the executable by linking the objects files generated by
		the compiler.

8. Function - Functions is the set of related instruction which performs some related task.
	      Functions are used to write reusable peace of code which can be written once
	      and can be executed multiple times.
	      Functions have four things in it:
		1. Function name
		2. Function return value
		3. Function parameters
		4. Function body - which contains the instructions.

9.Header - Header is the statement in the program which connects the libraries and functions
   	   which are defined outside the program to the programm you are writing so that
		you can use those functions within your program.


10. IDE - Integrated Development Enviroment
	  It is the platform which combines all toolchains from the SDK.
	  It is used for the faster developmen of the programs.

11. #include - Is the statement/syntax used to specify the library or header file to include.

12. library - Library is the set of functions which perform the related tasks.
	      There are two types of libraries one statically compiled library and dynamic
	      library.

13. linker - Linker is the program used to link all the object code and libraries which are
		machine understandable to the operating system understandable executables.

14. main() - This is the entry point function from when where our program actually stars executing

15. object code - The object is the file generated by compiler after complining the source code
	  	  object code is machine understandable. Which means different processor will need
		  different object code. Which means if we compile the code on one system/processor achitecture
		  then it may not work on other system/architecture. Becauase the assembly instruction change as
		  we change the systems.

16. output - Output is the result of the function/program etc. Output can be displayed on the screen
	     in the file or sent to the printer.

17. Program - Program is the file which contains the source code or instructions to be given to computer.
	      Program usually have the extensions like .cpp, .c etc.

18. Source Code - It the code or statements written using programming language like C++, C etc.
		  Source code is humand understandable.

19. Statement - Statement is line of code terminated by semi-colon. These statements can be executed
		by processor one after another.

Review Chapter5
1. 4 Types of errors: 
	1. Compile Time Error - Error found by the compiler.
	2. Link Time Error - Error found by linker while combining object files into an executable program.
	3. Runtime Error - Error found by checks in running program.
	4. Logic Error - When program executes but does not do what it is supposed to do, then it is called logic error.

2. Without resolving errors we can not run our programm. Even if we are able to run our programm it won't have
	required behaviour or required output.

3. Organize software to minimize errors, Eliminate most errors through testing and debugging, Make sure remaining
	errors are not serious.

4.  a. Tracing the whole programm from beginning to end. This method is quite time consuming and not productive.
    b. Getting hints from error and based on that tracing parts of programm which might generate that behaviour.
    c. Handing errors using special functionalities such as Exception handling to have more human friendly errors
	which can be easily tracked.

5. Because it is time consuming and often time we have some simple mistake which we overlook.

6. Error due to incorrect keywords from language, missing semicolon, calling functions which are not defined,
	inappropriate assignment of variable.

7. Assigning wrong value to a type,

8. Errors produced due to unsuccessful linkage to library functions.

9. Errors due faulty logic in program which generates unexpected outputs.

10. Sources of errors - Poor Specification, Incomplete program, Unexpected arguments, Unexpected input, Unexpected state
			Logical errors.

11. Using proper specification of programm we can make sure that our program generates required output.

12. hadling runtime error in called function is better since person who writes function often knows how his function
 	may cause failure. In this case calle have no idea which inputs might give the error to call. If calle handles
	the errors then he should know what erros may called function generate and according it can be handled which
	might not be the case always.

13. Using exeception is better idea than returning a value because then both calle and called function are aware of
  	errors generated by function.

14. We know that becuase of if input operation fails our programm generated either exception on unexpected behaviour.

15. Exception can ve thrown from the called function using throw keyword along with object to thwrow. And then calle function
	can catch that error to give proper error information to user.

16. That would be error because index number starts from 0 and specifying v.size() would cause to access element from
	vector which does not exist. i.e. memory is not allocated for it. So, it will generate out of range exception.

17. pre-condition checks inputs before performing a computation which guarantees that expected inputs are passed
	by the calle of the programm
    post-condition checks output before returing which validates the output.

18. When you know calle will always send correct inputs.
19. When called function will always generate expected results.
20. Manuallu debugging the programm / using debugger.

21. Commenting helps find the logical bugs in program which might have been overlooked by the programmer.

22. Testing makes sure that our programm runs for all required cases and it handles them all with grace. Debugging
	is more of resolving errors after programmer comes to know about it.








































